#version 450

struct Light 
{
	vec3 Position;
	int Type;
	vec4 Color;
	vec3 Direction;
	float Intensity;
};

layout (location = 0) in vec2 v_UV;

layout(set = 0, binding = 0) uniform sampler2D u_Position;
layout(set = 0, binding = 1) uniform sampler2D u_Normal;
layout(set = 0, binding = 2) uniform sampler2D u_Albedo;
layout(std140, set = 0, binding = 3) uniform LightArrayStub
{
	Light u_Lights[LIGHT_ARRAY_SIZE];
};

layout (location = 0) out vec4 o_Color;

layout (constant_id = 0) const uint c_LightCount = LIGHT_ARRAY_SIZE;

void main()
{
	// Get G-Buffer values
	vec3 fragPos = texture(u_Position, v_UV).rgb;
	vec3 normal = texture(u_Normal, v_UV).rgb;
	vec4 albedo = texture(u_Albedo, v_UV);

	vec4 diffuse = vec4(0.0);

	for (int i = 0; i < c_LightCount; i++)
	{
		vec3 lightDir = normalize(-u_Lights[i].Direction);
		float diff = max(dot(normal, lightDir), 0.0);
		diffuse = u_Lights[i].Color * u_Lights[i].Intensity * diff * albedo;
	}

	o_Color = diffuse;
}
