#version 450

struct Light 
{
	vec3 Position;
	int Type;
	vec4 Color;
	vec3 Direction;
	float Intensity;
};

layout (location = 0) in vec2 v_UV;

layout(set = 0, binding = 0) uniform sampler2D u_Position;
layout(set = 0, binding = 1) uniform sampler2D u_Normal;
layout(set = 0, binding = 2) uniform sampler2D u_Albedo;
layout(std140, set = 0, binding = 3) uniform LightArrayStub
{
	Light u_Lights[LIGHT_ARRAY_SIZE];
};

layout (location = 0) out vec4 o_Color;

layout (constant_id = 0) const uint c_LightCount = LIGHT_ARRAY_SIZE;

void main()
{
	// Get G-Buffer values
	vec3 fragPos = texture(u_Position, v_UV).rgb;
	vec3 normal = texture(u_Normal, v_UV).rgb;
	vec4 albedo = texture(u_Albedo, v_UV);

	for (int i = 0; i < c_LightCount; i++)
	{
		Light light = u_Lights[i];
		if (light.Type == 0)
		{
			vec3 lightDir = normalize(-light.Direction);
			float angle = clamp(dot(normal, lightDir), 0.0, 1.0);
			albedo = light.Color * angle;
		}
		else if (light.Type == 1)
		{
			float distance    = length(light.Position - fragPos);
			float attenuation = 1.0 / (1.0 + 0.09 * distance + 
    		    0.032 * (distance * distance));
			albedo *= attenuation;
		}
		else
		{
			albedo *= 1.0;
		}
	}

	o_Color = albedo;
}
