#version 450

struct MaterialData
{
    vec3 AmbientColor;
    int DiffuseTextureIndex;

    vec4 DiffuseColor;

    vec3 SpecularColor;
    int SpecularTextureIndex;

    int SpecularHighlightTextureIndex;
    float Specularity;
    float IOR;
    float Dissolve;

    vec3 EmissiveColor;
    int AlphaMapIndex;
    
    vec3 TransmittanceFilter;
    int BumpMapIndex;

    int DisplacementMapIndex;
    int IlluminationModel;
};

layout (location = 0) in vec3 v_Normal;
layout (location = 1) in vec2 v_TexCoord;
layout (location = 2) in vec3 v_Position;
layout (location = 3) in vec3 v_Tangent;
layout (location = 4) in flat int v_MaterialIndex;

layout (location = 0) out vec4 o_Position;
layout (location = 1) out vec4 o_Normal;
layout (location = 2) out vec4 o_Albedo;

layout(std140, set = 0, binding = 1) uniform MaterialDataStub
{
    MaterialData u_Materials[MATERIAL_ARRAY_SIZE];
};

layout(set = 0, binding = 2) uniform sampler2D u_Textures[TEXTURE_ARRAY_SIZE];

void main() 
{
	MaterialData mat = u_Materials[v_MaterialIndex];
	o_Position = vec4(v_Position, 1.0);

	// Calculate normal in tangent space
	vec3 N = normalize(v_Normal);
	vec3 T = normalize(v_Tangent);
	vec3 B = cross(N, T);
	mat3 TBN = mat3(T, B, N);
	vec3 tnorm;
	if (mat.BumpMapIndex != -1)
	{
		tnorm = TBN * normalize(texture(u_Textures[mat.BumpMapIndex], v_TexCoord).xyz * 2.0 - vec3(1.0));
	}
	else
	{
		tnorm = TBN * vec3(1.0);
	}
	
	o_Normal = vec4(tnorm, 1.0);

	o_Albedo = texture(u_Textures[mat.DiffuseTextureIndex], v_TexCoord);
}